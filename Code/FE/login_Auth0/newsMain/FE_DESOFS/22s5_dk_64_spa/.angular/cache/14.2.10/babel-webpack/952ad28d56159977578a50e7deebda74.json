{"ast":null,"code":"import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { warehouseData } from '../default_data';\nexport class WarehouseModels {\n  constructor(nodes) {\n    this.loaded = false;\n    this.object = new THREE.Group();\n    const loader = new GLTFLoader();\n\n    for (let node of nodes) {\n      // Remove potential duplicates.\n      if (this.object.children.filter(warehouse => warehouse.position === new THREE.Vector3(node.x, node.y, node.z + warehouseData.zDiff)).length > 0) {\n        continue;\n      }\n\n      let rng = Math.floor(Math.random() * (10 - 1 + 1)) + 1;\n\n      if (rng < 4) {\n        loader.load(warehouseData.warehouse1URL, gltf => {\n          this.loadAndAddModel(gltf, node);\n        });\n      } else if (rng >= 4 && rng < 7) {\n        loader.load(warehouseData.warehouse2URL, gltf => {\n          this.loadAndAddModel(gltf, node);\n        });\n      } else {\n        loader.load(warehouseData.warehouse3URL, gltf => {\n          this.loadAndAddModel(gltf, node);\n        });\n      }\n    }\n\n    this.loaded = true;\n  }\n\n  loadAndAddModel(gltf, node) {\n    let model = gltf.scene;\n    model.position.set(node.x, node.y, node.z + warehouseData.zDiff);\n    model.rotation.x = Math.PI / 2;\n    model.scale.set(warehouseData.scale, warehouseData.scale, warehouseData.scale);\n    model.castShadow = true;\n    model.receiveShadow = true;\n    this.object.add(model);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}