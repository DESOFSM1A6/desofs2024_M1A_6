{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { config } from '../config';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let PercursoService = /*#__PURE__*/(() => {\n  class PercursoService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.percursoUrl = `${config.mdlApiUrl}/Percurso`;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    getPercursos() {\n      return this.http.get(this.percursoUrl).pipe(tap(_ => this.log('fetched percurso')), catchError(this.handleError('getPercurso', [])));\n    }\n    /**\r\n    * Handle Http operation that failed.\r\n    * Let the app continue.\r\n    *\r\n    * @param operation - name of the operation that failed\r\n    * @param result - optional value to return as the observable result\r\n    */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a PercursoService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`PercursoService: ${message}`);\n    }\n\n    createPercurso(whPartida, whChegada, distancia, tempoComCargaMaX, energiaGastaComCargaMax) {\n      const percurso = {\n        whPartida: whPartida,\n        whChegada: whChegada,\n        distancia: distancia,\n        tempoComCargaMaX: tempoComCargaMaX,\n        energiaGastaComCargaMax: energiaGastaComCargaMax\n      };\n      return this.http.post(this.percursoUrl, percurso, this.httpOptions).pipe(tap(newPercurso => this.log(`added percurso w/ Armazem partida=${newPercurso.whPartida} and Armazem chegada=${newPercurso.whChegada}`)), catchError(this.handleError('addPercurso')));\n    }\n\n  }\n\n  PercursoService.ɵfac = function PercursoService_Factory(t) {\n    return new (t || PercursoService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  PercursoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PercursoService,\n    factory: PercursoService.ɵfac,\n    providedIn: 'root'\n  });\n  return PercursoService;\n})();","map":null,"metadata":{},"sourceType":"module"}