{"ast":null,"code":"import { catchError, of, tap } from \"rxjs\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { config } from \"../config\";\nimport { DeliveryMap } from \"../Mapper/DeliveryMap\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let DeliveryService = /*#__PURE__*/(() => {\n  class DeliveryService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.deliveriesUrl = `${config.mdaApiUrl}/Delivery`;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    getDeliveries() {\n      return this.http.get(this.deliveriesUrl).pipe(tap(_ => this.log('fetched deliveries')), catchError(this.handleError('getDeliveries', [])));\n    }\n\n    createDelivery(delivery) {\n      let deliveryDTO = DeliveryMap.toDTO(delivery);\n      return this.http.post(this.deliveriesUrl, deliveryDTO, this.httpOptions).pipe(tap(deliveryDto => this.log(`added delivery w/ id=${delivery.id}`)));\n    }\n    /**\r\n     * Handle Http operation that failed.\r\n     * Let the app continue.\r\n     *\r\n     * @param operation - name of the operation that failed\r\n     * @param result - optional value to return as the observable result\r\n     */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a DeliveryService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`DeliveryService: ${message}`);\n    }\n\n  }\n\n  DeliveryService.ɵfac = function DeliveryService_Factory(t) {\n    return new (t || DeliveryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  DeliveryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DeliveryService,\n    factory: DeliveryService.ɵfac,\n    providedIn: 'root'\n  });\n  return DeliveryService;\n})();","map":null,"metadata":{},"sourceType":"module"}