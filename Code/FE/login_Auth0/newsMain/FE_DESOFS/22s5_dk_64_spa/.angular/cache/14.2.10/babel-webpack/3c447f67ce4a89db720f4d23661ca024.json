{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { config } from '../config';\nimport { catchError, tap } from 'rxjs/operators';\nimport { WarehouseMap } from '../Mapper/WarehouseMap';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let WarehouseService = /*#__PURE__*/(() => {\n  class WarehouseService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.warehouseUrl = `${config.mdaApiUrl}/Warehouses`;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    getWarehouses() {\n      return this.http.get(this.warehouseUrl).pipe(tap(_ => this.log('fetched warehouse')), catchError(this.handleError('getWarehouse', [])));\n    }\n\n    createWarehouse(warehouse) {\n      let warehouseDTO = WarehouseMap.toDTO(warehouse);\n      /** POST: add a new warehouse to the server */\n\n      return this.http.post(this.warehouseUrl, warehouseDTO, this.httpOptions).pipe(tap(warehouseDTO => this.log(`added warehouse w/ id=${warehouse.id}`)));\n    }\n\n    verifyIfExists(warehouseID) {\n      const url = `${this.warehouseUrl}/${warehouseID}`;\n      this.http.get(url, {\n        observe: 'response'\n      }).subscribe(response => {\n        if (response.status == 200) {\n          return of(true);\n        } else {\n          if (response.status == 404) {\n            this.log(`O armazém com ID = ${warehouseID} não existe.`);\n          }\n\n          return of(false);\n        }\n      });\n      return of(false);\n    }\n    /**\r\n    * Handle Http operation that failed.\r\n    * Let the app continue.\r\n    *\r\n    * @param operation - name of the operation that failed\r\n    * @param result - optional value to return as the observable result\r\n    */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a WarehouseService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`WarehouseService: ${message}`);\n    }\n\n  }\n\n  WarehouseService.ɵfac = function WarehouseService_Factory(t) {\n    return new (t || WarehouseService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  WarehouseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WarehouseService,\n    factory: WarehouseService.ɵfac,\n    providedIn: 'root'\n  });\n  return WarehouseService;\n})();","map":null,"metadata":{},"sourceType":"module"}