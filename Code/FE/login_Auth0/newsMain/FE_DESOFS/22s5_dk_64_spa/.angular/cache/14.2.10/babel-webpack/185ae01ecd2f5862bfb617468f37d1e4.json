{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as THREE from 'three';\nimport { Roundabouts } from './scene_objects/roundabouts';\nimport { WarehouseModels } from './scene_objects/warehouses';\nimport { Streets } from './scene_objects/streets';\nimport { Ground } from './scene_objects/ground';\nimport { Skybox } from './scene_objects/skybox';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./graph/graph_creator\";\nconst _c0 = [\"canvas\"];\nexport let VisualizationComponent = /*#__PURE__*/(() => {\n  class VisualizationComponent {\n    constructor(graphCreator) {\n      this.graphCreator = graphCreator;\n    }\n\n    get canvas() {\n      return this.canvasRef.nativeElement;\n    }\n\n    createScene() {\n      // Generate renderer.\n      this.renderer = new THREE.WebGLRenderer({\n        canvas: this.canvas,\n        antialias: true\n      });\n      this.renderer.setSize(this.canvas.clientWidth, this.canvas.clientHeight);\n      document.body.appendChild(this.renderer.domElement);\n      this.renderer.shadowMap.enabled = true; // Generate scene\n\n      this.scene = new THREE.Scene();\n      this.scene.background = new THREE.Color(0x000000); // Generate ambient light\n\n      const ambientLight = new THREE.AmbientLight(0x404040, 3); // soft white light\n\n      this.scene.add(ambientLight); // Generate hemisphere light\n\n      const hemiLight = new THREE.HemisphereLight(0xffffbb, 0x080820, 1);\n      this.scene.add(hemiLight); // Generate pointed lights for shadow generation.\n\n      const pointLight1 = new THREE.PointLight(0xffffff, 0.5);\n      pointLight1.position.set(-100, -100, 100);\n      pointLight1.castShadow = true;\n      const pointLight2 = new THREE.PointLight(0xffffff, 0.5);\n      pointLight2.position.set(100, -100, 100);\n      pointLight2.castShadow = true;\n      this.scene.add(pointLight1);\n      this.scene.add(pointLight2);\n      /*const cameraHelper = new THREE.CameraHelper(pointLight1.shadow.camera);\r\n      const cameraHelper2 = new THREE.CameraHelper(pointLight2.shadow.camera);\r\n      this.scene.add(cameraHelper);\r\n      this.scene.add(cameraHelper2);\r\n      */\n      // Generate camera, position it and set y as up vector.\n\n      this.camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.camera.position.set(0, 125, 125);\n      this.camera.lookAt(0, 0, 0);\n      this.camera.up.set(0, 0, 1); // Generate grid helper for positioning purposes.\n\n      /* this.gridGround = new THREE.GridHelper(300, 60, 0x3f3f3f, 0x3f3f3f);\r\n      this.gridGround.rotation.x = Math.PI / 2;\r\n      this.scene.add(this.gridGround);\r\n      */\n      // Generate orbit controls. (i.e., pan, zoom, orbit)\n\n      const controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.graphCreator.generateGraph().subscribe(results => {\n        this.graphCreator.buildNodes(results.warehouses);\n        this.graphCreator.buildEdges(results.paths);\n        this.streets = new Streets(this.graphCreator.nodes, this.graphCreator.edges);\n        this.roundabouts = new Roundabouts(this.graphCreator.nodes);\n        this.warehouses = new WarehouseModels(this.graphCreator.nodes);\n        this.ground = new Ground();\n        this.skybox = new Skybox();\n        console.log(this.graphCreator.nodes);\n      });\n    }\n\n    ngOnInit() {}\n\n    ngAfterViewInit() {\n      this.createScene();\n      this.startRenderingLoop();\n    }\n\n    startRenderingLoop() {\n      let component = this;\n\n      (function render() {\n        requestAnimationFrame(render);\n\n        if (component.roundabouts.loaded && component.streets.loaded && component.warehouses.loaded && component.ground.loaded && component.skybox.loaded) {\n          component.scene.add(component.streets.object);\n          component.scene.add(component.roundabouts.object);\n          component.scene.add(component.warehouses.object);\n          component.scene.add(component.ground.object);\n          component.scene.add(component.skybox.object);\n        }\n\n        component.renderer.render(component.scene, component.camera);\n      })();\n    }\n\n    ngOnDestroy() {\n      document.getElementById('canvas').remove();\n    }\n\n  }\n\n  VisualizationComponent.ɵfac = function VisualizationComponent_Factory(t) {\n    return new (t || VisualizationComponent)(i0.ɵɵdirectiveInject(i1.GraphCreator));\n  };\n\n  VisualizationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: VisualizationComponent,\n    selectors: [[\"app-visualization\"]],\n    viewQuery: function VisualizationComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvasRef = _t.first);\n      }\n    },\n    decls: 4,\n    vars: 0,\n    consts: [[\"id\", \"canvas-container\"], [\"id\", \"canvas\", 2, \"height\", \"100%\", \"width\", \"100%\"], [\"canvas\", \"\"]],\n    template: function VisualizationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"br\");\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelement(2, \"canvas\", 1, 2);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"#canvas-container[_ngcontent-%COMP%]{width:100%;text-align:center}h2[_ngcontent-%COMP%]{font-family:arial,sans-serif;font-size:2em;text-align:center;font-weight:700}button[_ngcontent-%COMP%]{font-family:arial,sans-serif;padding:.5rem 1.5rem;font-size:1rem;margin-bottom:2rem;color:#f4f4f4;background-color:#f0a500;text-align:center}.button[_ngcontent-%COMP%]:hover{font-family:arial,sans-serif;color:#000;background-color:#cf7500}\"]\n  });\n  return VisualizationComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}