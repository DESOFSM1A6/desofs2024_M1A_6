{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { config } from '../config';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let CamiaoService = /*#__PURE__*/(() => {\n  class CamiaoService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.camiaoUrl = `${config.mdlApiUrl}/Camiao`;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    getCamioes() {\n      return this.http.get(this.camiaoUrl).pipe(tap(_ => this.log('fetched camiao')), catchError(this.handleError('getCamioes', [])));\n    }\n    /**\r\n    * Handle Http operation that failed.\r\n    * Let the app continue.\r\n    *\r\n    * @param operation - name of the operation that failed\r\n    * @param result - optional value to return as the observable result\r\n    */\n\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n    /** Log a CamiaoService message with the MessageService */\n\n\n    log(message) {\n      this.messageService.add(`CamiaoService: ${message}`);\n    }\n\n    createCamiao(caracteristica, tara, capacidadeMassa, capacidadekWh, autonomia, tempoCarregamento) {\n      const camiao = {\n        caracteristica: caracteristica,\n        tara: tara,\n        capacidadeMassa: capacidadeMassa,\n        capacidadekWh: capacidadekWh,\n        autonomia: autonomia,\n        tempoCarregamento: tempoCarregamento\n      };\n      return this.http.post(this.camiaoUrl, camiao, this.httpOptions).pipe(tap(newCamiaoDTO => this.log(`added camiao w/ caracteristica=${newCamiaoDTO.caracteristica}`)), catchError(this.handleError('addCamiao')));\n    }\n\n  }\n\n  CamiaoService.ɵfac = function CamiaoService_Factory(t) {\n    return new (t || CamiaoService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  CamiaoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CamiaoService,\n    factory: CamiaoService.ɵfac,\n    providedIn: 'root'\n  });\n  return CamiaoService;\n})();","map":null,"metadata":{},"sourceType":"module"}